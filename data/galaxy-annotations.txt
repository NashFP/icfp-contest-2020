-- Hand-written annotations to galaxy.txt.
--
-- This file is an attempt to make sense of the aliencode in galaxy.txt.
-- The program in jason-fix-me uses it to substitute human-readable names
-- when it pretty-prints the aliencode; run with the command:
--
-- cd ../jason-fix-me && stack run ../data/galaxy.txt ../data/galaxy-annotations.txt


-- Compressed images
--
-- A "compressed image" is a pair of integers that can be decoded into a
-- list of points by `decompress`.

:1029 = cimgGalaxyIcon
-- ..***..
-- .....*.
-- .***..*
-- *.*.*.*
-- *..***.
-- .*.....
-- ..***..

:1030 = cimgAp
-- **
-- *.

:1031 = cimgTuningFork
-- ****
-- *.*.
-- *.*.
-- *.*.

:1032 = cimgSqrt2
-- *******
-- *.....*
-- *..**.*
-- *.*.*.*
-- *.*...*
-- *.....*
-- *******

:1034 = cimgSolidSquare5
-- *****
-- *****
-- *****
-- *****
-- *****

:1035 = cimgTwoSquares
-- ***..
-- ***..
-- *****
-- ..***
-- ..***

:1036 = cimgEq
-- ***
-- *..
-- ***

:1037 = cimgHut
-- ****
-- **.*
-- **.*
-- **.*

:1038 = cimgEllipsis
-- *.*.*.*

:1039 = cimgTheta
-- .***.
-- *...*
-- **.**
-- *...*
-- .***.

:1040 = cimgSkipButton
-- *...*
-- **..*
-- ***.*
-- **..*
-- *...*

:1041 = cimgX
-- ****
-- **.*
-- *.**
-- ****

:1042 = cimgY
-- ****
-- **.*
-- *..*
-- ****

:1080 = cimgUfo
-- .***.
-- .....
-- *****
-- .....
-- .***.

:1081 = cimgPong
-- *...*
-- *...*
-- *.*.*
-- *...*
-- *...*

:1082 = cimgBoxedTornado
-- *******
-- *.....*
-- *****.*
-- ***.***
-- *.*****
-- *.....*
-- *******

:1083 = cimgTeamRed1
-- ...
-- ...
-- ..*

:1084 = cimgTeamRed2
-- ....
-- .*.*
-- ..*.
-- .*.*

:1085 = cimgTeamRed3
-- *...*
-- .***.
-- .***.
-- .***.
-- *...*

:1086 = cimgTeamRed4
-- **.**
-- *****
-- .***.
-- *****
-- **.**

:1087 = cimgTeamGold1
-- ...
-- ...
-- ..*

:1088 = cimgTeamGold2
-- ....
-- ..*.
-- .*.*
-- ..*.

:1089 = cimgTeamGold3
-- ..*..
-- .***.
-- **.**
-- .***.
-- ..*..

:1090 = cimgTeamGold4
-- .***.
-- *****
-- **.**
-- *****
-- .***.

:1091 = teamRedIcons -- List of the four "team red" icons, as compressed images
:1092 = teamGoldIcons -- List of the four "team gold" icons, as compressed images

:1093 = cimgH
-- *...*
-- *...*
-- **.**
-- *...*
-- *...*

:1097 = cimgCheckers
-- *.*.*
-- .*.*.
-- *.*.*
-- .*.*.
-- *.*.*

:1098 = cimgHorizStripes
-- *****
-- .....
-- *****
-- .....
-- *****

:1099 = cimgVertStripes
-- *.*.*
-- *.*.*
-- *.*.*
-- *.*.*
-- *.*.*

:1100 = cimgDotSquare
-- *****
-- *...*
-- *.*.*
-- *...*
-- *****

:1101 = cimgEasterIslandHead
-- .***.
-- .*...
-- .****
-- .***.
-- *....



:1110 = make1X x -- returns the list [1, x]
:1111 = make2XY x y -- returns the list [2, x, y]
:1112 = make3XY x y -- returns the list [3, x, y]
:1113 = make4XY x y -- returns the list [4, x, y]
:1114 = make5X x -- returns the list [5, x]

:1115 = cons h t -- makes a pair
:1116 = headOr default xs -- `car xs`, or `default` if xs is empty.

:1117 = pow2 x -- 2 ** x
:1118 = log2 x -- base 2 logarithm of x, rounded down; log2 0 is 0.
:1119 = logb x b -- logarithm base b of x, rounted down; logb 0 b is 0.
:1120 = abs x -- absolute value of the integer x
:1121 = max x y -- returns x or y, whichever is greater
:1122 = min x y -- returns x or y, whichever is less

:1124 = hasElem xs x -- true if x is an element of xs
:1126 = map xs f -- map the elements of xs through f (note the arguments are swapped)
:1127 = mapIndexed xs f i -- like map, except f also receives the element index (starting with i, typically 0) as a second argument
:1128 = length xs -- the length of the list xs
:1131 = concat2 a b -- string together the two lists a and b (like (++) in Haskell)
:1132 = foldl xs start f -- left fold (like `foldl f start xs` in Haskell)
:1133 = foldr xs start f -- right fold (like `foldr (swap f) start xs` in Haskell, I think)
:1134 = concat lists -- string together a list of lists
:1135 = filter xs test -- filter list elements by a predicate `test` (note the arguments are swapped)
:1136 = filterIndexed xs test -- like filter, but pass the element index to `test` as a second argument
:1137 = any xs test -- true if any element of xs passes the `test`
:1138 = revrange n -- reversed integer range: revrange 4 == [3, 2, 1, 0]
:1139 = range n -- integer range: range 4 = [0, 1, 2, 3]
:1141 = getAtUnchecked xs n -- get nth element of xs (counting from 0)
:1142 = getAt xs n -- get element n of xs, or nil if length xs <= n
:1143 = sum xs -- sum of all the numbers in xs
:1144 = insertAt xs i v -- inserts v at index i within xs: `take i xs ++ [v] ++ drop i xs`

:1146 = maximum xs -- return the maximum of a nonempty list of numbers
:1147 = maximumBy xs lt -- maximum of a list of values under the order imposed by comparison-function `lt`
:1149 = minimum xs -- minimum of a nonempty list of values
:1150 = sortOn xs score -- sort a list in order of ascending score, using the given scoring function
:1152 = sortBy xs lt -- sort a list in the order imposed by comparison-function `lt`
:1153 = filterWithSuccessor xs test -- elements x of xs `test x y` is true, where y is the next element; always retains the last element
:1155 = uniqSort xs -- sort the list of numbers xs in ascending order, discarding duplicates

:1162 = vec2 x y -- 2d vector constructor. Same as `cons`.
:1166 = rect4 x0 y0 w h -- rectangle with top-left corner (x0, y0) and dimensions (w, h).
:1167 = rect p d -- rectangle with top-left corner p and dimensions d
:1168 = square center r -- return a rectangle with the given center, and width/height 2r+1.
:1169 = rectTranslate rect v -- translate the rect by 2d vector v.
:1172 = vAdd u v -- Vector addition.
:1173 = vTranslate v dx dy -- translate the vector v by given integers (dx, dy)
:1174 = vAddX v dx -- translate v in the x direction by dx units
:1175 = vX v -- get x coordinate of vector v
:1176 = maximumY pts -- return maximum y coordinate of a list of vectors
:1178 = vY v -- get y coordinate of vector v
:1179 = vAddY v dy -- translate v in the y direction by dy units
:1180 = vScale v k -- multiply both coordinates of v by the number k
:1181 = vDist u v -- a distance metric, max (abs (u.x - v.x)) (abs (u.y - v.y))
:1183 = vListTranslate vs d -- add vector d to each vector in the list vs
:1187 = vListAddX vs dx -- add dx to x coordinate of each vector in the list vs
:1188 = vListAddY vs dy -- add dy to y coordinate of each vector in the list vs

:1189 = make0XNil x -- returns the list [0, x, nil]
:1190 = make0XY x y -- returns the list [0, x, y]
:1191 = make1XY x y -- returns the list [1, x, y]

:1194 = drawLine u v -- list of (vDist u v) linearly interpolated vectors starting at u, ending at v
:1193 = drawLineDotted u v k -- like linterp, but discarding some points to leave a vDist of k between points, except the last
:1195 = drawHorizLine x y w -- list of w points in a horizontal line from (x + w - 1, y) to (x, y)
:1196 = drawHorizLineDotted x y w -- like hline, but drop every other point
:1197 = drawVertLine x y h -- list of h points in a vertical line from (x, y + h - 1) to (x, y)
:1198 = drawSquare x -- list of points drawing an axis-aligned square with vertices at (-x, -x) and (x, x)
--:1199 = (\x -> :1201 (neg x) (neg x) (add (mul 2 x) 1) (add (mul 2 x) 1))
:1200 = drawRect x y w h -- list of points drawing an axis-aligned rectangle with vertexes at (x, y) and (x+w-1, y+h-1)
:1201 = fillRect x y w h -- list of points in an axis-aligned rectangle with vertex at (x, y) and dimensions (w, h)
:1202 = fillRectAux x y h a -- helper function for fillRect

:1203 = isInRange x start stop -- true if start <= x < stop
:1204 = vInRect v rect -- true if the point v is in the given rectangle
:1205 = drawNumFrame n -- list of points (1..=n, 0) and (0, 1..=n), a frame for a nonnegative alien number
:1206 = drawNumBits bits n -- list of points: drawNumFrame n, plus the given bits drawn inside the frame
:1207 = toBitsAux k -- convert k to binary. List of 0s and 1s, least significant bit first. Empty list if k=0.
:1208 = toBits0 k nbits -- convert k to binary. List of exactly nbits bits, least significant bit first.
:1209 = toBits k -- convert k to binary. List of 0s and 1s, least significant bit first. [0] if k=0.
:1210 = sqrt k -- square root of k, rounded up. 0 if k is negative.
:1212 = drawNumAux addOrigin n -- draw aliencode number representing n. If addOrigin is true, also fill in the origin.
:1213 = drawNumAuxSize addOrigin n size -- like drawNumAux, but don't autocompute the best square size
:1214 = drawNum n -- draw aliencode number representing n
:1215 = drawNumLeft n -- like drawNum, but drawing in the second quadrant (nonpositive x, nonnegative y)

:1216 = drawNumDownLeft n -- like drawNum, but drawing in the third quadrant (nonpositive x and y). If n < 0, the extra pixel extends just into the second quadrant.
:1217 = drawNumSize n size -- like drawNum, but don't autocompute the best square size
:1218 = drawNums ns -- draw a list of numbers `ns` in a row.
:1220 = concatImages imgs x0 -- combine the list of images `imgs` into a single image, arranged horizontally starting at offset x0, separated by 2px gaps, assuming each img uses only nonnegative x coordinates
:1221 = concatImagesGaps imgs x0 gaps -- like concatImages, but after each image in `imgs`, add extra horizontal space equal to the corresponding element of `gaps`
:1222 = decompressThenConcatImages cimgs -- concatImages (map cimgs decompress) 0
:1224 = bbox img -- Return the bounding box around the given image, which must not be blank.
:1225 = decompress cimg -- convert bitmapped ("compressed") image to list of points

-- . . . .

:1454 = hasRow3 grid start step color -- true if `color` has three in a row starting at `grid[start]`.
:1455 = isWinner grid color -- true if `color` has won a game of tic-tac-toe in `grid`
:1456 = hasHorizRow3 grid color -- true if `color` has three in a row horizontaly in `grid`
:1457 = hasVertRow3 grid color -- true if `color` has three in a row vertically in `grid`
:1458 = isGameOver grid -- true if the game of tic-tac-toe in `grid` is over

